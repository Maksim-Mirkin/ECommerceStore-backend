package edu.mlm.ecommercestore.entity;


import edu.mlm.ecommercestore.enums.Status;
import edu.mlm.ecommercestore.error.InvalidStatusException;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.persistence.*;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotNull;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

/**
 * Represents an order placed by a customer in the e-commerce store.
 * This entity is linked to various other entities such as {@link User} for the customer who placed the order,
 * and a collection of {@link OrderItem} for the items included in the order.
 * Orders contain details such as the order date, total price, delivery address, and payment information.
 * Each order also has a status indicating its current processing state (e.g., PENDING, APPROVED, DECLINED).
 * <p>
 * This entity maps to the "orders" table in the database.
 * <p>
 * Note: The {@link #setStatus(String)} method allows for setting the order status by string value,
 * ensuring the status is valid and exists within the {@link Status} enum.
 *
 * @author Maksim Mirkin
 * @version 1.0
 * @since 1.0
 */
@Entity
@Builder
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@Table(name = "orders")
@Schema(description = "Represents an order placed by a customer in the e-commerce store")
public class Order {

    /**
     * The unique identifier for the order. It is auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Schema(description = "The unique identifier of the order")
    private Long id;

    /**
     * The items included in the order. It is a list of {@link OrderItem} entities.
     * Each order item is automatically persisted or removed with the order due to the {@code cascade = CascadeType.ALL}
     * and {@code orphanRemoval = true} settings.
     */
    @NotNull
    @OneToMany(mappedBy = "order", cascade = CascadeType.ALL, orphanRemoval = true)
    @Schema(description = "List of items included in the order")
    private List<OrderItem> items;

    /**
     * The customer who placed the order. It is a many-to-one relationship linking back to the {@link User} entity.
     */
    @ManyToOne
    @JoinColumn(nullable = false, name = "customer_id")
    @Schema(description = "The customer who placed the order")
    private User customer;

    /**
     * The date and time when the order was created. This timestamp is automatically generated
     * and managed by the database, ensuring an accurate record of when the order was initially provided.
     */
    @CreationTimestamp
    @Schema(description = "The date and time when the order was created in the store")
    private LocalDateTime createdAt;

    /**
     * The date and time when the order was last updated. This allows for tracking any modifications
     * to the order over time. Like {@code createdAt}, this timestamp is automatically managed by the database.
     */
    @UpdateTimestamp
    @Schema(description = "The date and time when the order was last updated")
    private LocalDateTime updatedAt;

    /**
     * The total price of all items in the order. It must be greater than 0.
     */
    @NotNull
    @Min(value = 0, message = "Total price must be greater than 0")
    @Schema(description = "The total price of the order", example = "150.00")
    private BigDecimal totalPrice;

    /**
     * The delivery address for the order.
     */
    @NotNull
    @Schema(description = "The delivery address for the order", example = "123 Main St")
    private String address;

    /**
     * The city of the delivery address.
     */
    @NotNull
    @Schema(description = "The city of the delivery address", example = "Anytown")
    private String city;

    /**
     * The payment information or method used for the order.
     */
    @NotNull
    @Schema(description = "Payment information or method used for the order", example = "Credit Card")
    private String paymentInformation;

    /**
     * The postal code of the delivery address.
     */
    @NotNull
    @Schema(description = "The postal code of the delivery address", example = "1234567")
    private String postalCode;

    /**
     * The phone number associated with the order.
     */
    @NotNull
    @Schema(description = "The phone number associated with the order", example = "0501112233")
    private String phoneNumber;

    /**
     * The current status of the order, represented as an enum {@link Status}.
     */
    @NotNull
    @Enumerated(EnumType.STRING)
    @Schema(description = "The current status of the order", example = "PENDING/APPROVED/DECLINED")
    private Status status;

    /**
     * Sets the status of the order by validating and converting a string value to its corresponding {@link Status} enum.
     *
     * @param status the status string to set
     * @throws InvalidStatusException if the provided status string does not match any {@link Status} enum value
     */
    public void setStatus(String status) {
        Arrays.stream(Status.values())
                .filter(s -> status.equalsIgnoreCase(s.name()))
                .findAny()
                .orElseThrow(InvalidStatusException::new);
        this.status = Status.valueOf(status.toUpperCase());
    }
}