package edu.mlm.ecommercestore.entity;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.persistence.*;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotNull;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDateTime;

/**
 * Represents a customer's rating for a product within the e-commerce platform.
 * Ratings are an integral part of the platform, allowing customers to provide feedback on products
 * they have purchased or used, with a scale from 1 (lowest) to 5 (highest).
 * <p>
 * This entity maps to the "ratings" table in the database and includes relationships to both the
 * {@link User} entity (representing the customer who left the rating) and the {@link Product} entity
 * (indicating the product that was rated).
 * <p>
 * Additionally, timestamps for when the rating was created and last updated are automatically managed
 * by the database, providing a historical record of customer feedback over time.
 *
 * @author Maksim Mirkin
 * @version 1.0
 * @since 1.0
 */
@Entity
@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
@Builder
@Table(name = "ratings")
@Schema(description = "Represents a customer's rating for a product," +
        " ranging from 1 (lowest) to 5 (highest).")
public class Rating {

    /**
     * The unique identifier for the rating. This ID is auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Schema(description = "The unique identifier of the rating")
    private Long id;

    /**
     * The rating value assigned by the user, on a scale of 1 to 5.
     * This value is constrained to be within the range of 1 to 5 inclusively,
     * ensuring that only valid ratings are stored in the database.
     */
    @Min(1)
    @Max(5)
    @NotNull
    @Schema(description = "The rating value, on a scale of 1 to 5", example = "4")
    private Integer rating;

    /**
     * The user who provided the rating. This establishes a many-to-one relationship between
     * the {@link Rating} and {@link User} entities, linking each rating to a specific user.
     */
    @ManyToOne
    @JoinColumn(name = "user_id")
    @NotNull
    @Schema(description = "The user who provided the rating")
    private User user;

    /**
     * The product to which the rating is applied. This forms a many-to-one relationship
     * between the {@link Rating} and {@link Product} entities, associating each rating with a particular product.
     */
    @ManyToOne
    @JoinColumn(name = "product_id")
    @NotNull
    @Schema(description = "The product to which the rating is applied")
    private Product product;

    /**
     * The date and time when the rating was created. This timestamp is automatically generated
     * and managed by the database, ensuring an accurate record of when the rating was initially provided.
     */
    @CreationTimestamp
    @Schema(description = "The date and time when the rating was created")
    private LocalDateTime createdAt;

    /**
     * The date and time when the rating was last updated. This allows for tracking any modifications
     * to the rating over time. Like {@code createdAt}, this timestamp is automatically managed by the database.
     */
    @UpdateTimestamp
    @Schema(description = "The date and time when the rating was last updated")
    private LocalDateTime updatedAt;
}
