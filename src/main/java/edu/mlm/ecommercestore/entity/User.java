package edu.mlm.ecommercestore.entity;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.persistence.*;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.*;

import java.util.Set;

/**
 * Entity representing a user within the e-commerce system.
 * This class holds information about the user's credentials, including their username, email, and password.
 * It also details the roles associated with the user, which define their permissions and access levels within the system.
 * <p>
 * Users are central to the system, allowing for personalized experiences and access control based on their roles,
 * whether they are customers, administrators, or any other defined role.
 * <p>
 * This entity maps to the "users" table in the database. User credentials and roles are maintained here,
 * with a many-to-many relationship to the {@link Role} entity, indicating the user's roles within the system.
 *
 * @author Maksim Mirkin
 * @version 1.0
 * @since 1.0
 */
@Entity
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@Builder
@Table(name = "users")
@Schema(description = "Represents a user in the e-commerce system, detailing their credentials and associated roles.")
public class User {

    /**
     * The unique identifier for the user. This ID is auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Schema(description = "The unique identifier of the user")
    private Long id;

    /**
     * The username of the user. It must be at least 2 characters long.
     * Usernames are unique identifiers chosen by users and are used for login and identification purposes within the system.
     */
    @NotNull
    @Size(min = 2)
    @Schema(
            description = "The username of the user, which must be at least 2 characters long",
            example = "user123"
    )
    private String username;

    /**
     * The email address of the user, following standard email formatting rules.
     * Email addresses are used for communication, verification processes, and potentially as an alternative login identifier.
     */
    @NotNull
    @Valid
    @Email
    @Pattern(regexp = "^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$")
    @Schema(
            description = "The email address of the user, following standard email formatting",
            example = "user@example.com"
    )
    private String email;

    /**
     * The password of the user. Passwords must meet specific security requirements to enhance the security of user accounts.
     * These requirements include the presence of digits, lower and uppercase letters, and special characters.
     */
    @NotNull
    @Schema(
            description = "The password of the user, meeting specific security requirements including digits, lower and uppercase letters, and special characters",
            example = "Pass123!"
    )
    private String password;

    /**
     * The image of the user.
     */
    @NotNull
    @Schema(
            description = "The image of the user",
            example = "https://example.com/image.jpg"
    )
    private String userImage;

    /**
     * The set of roles associated with the user. Roles determine the user's permissions and access within the system.
     * This relationship is implemented as a many-to-many association, reflecting the versatility of user roles.
     */
    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(
            name = "user_roles",
            joinColumns = @JoinColumn(
                    name = "user_id",
                    referencedColumnName = "id"
            ),
            inverseJoinColumns = @JoinColumn(
                    name = "role_id",
                    referencedColumnName = "id"
            )
    )
    @Schema(description = "The set of roles associated with the user, determining their permissions and access within the system")
    private Set<Role> roles;
}