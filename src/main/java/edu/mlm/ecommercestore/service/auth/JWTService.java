package edu.mlm.ecommercestore.service.auth;

import lombok.RequiredArgsConstructor;
import lombok.val;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.jwt.JwtClaimsSet;
import org.springframework.security.oauth2.jwt.JwtEncoder;
import org.springframework.security.oauth2.jwt.JwtEncoderParameters;
import org.springframework.stereotype.Service;

import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.stream.Collectors;

/**
 * Service for JWT (JSON Web Token) operations, specifically for generating JWT tokens for authenticated users.
 * <p>
 * This service leverages Spring Security's {@link JwtEncoder} for the creation of JWT tokens, encapsulating
 * the details of token generation, including setting claims like the subject, issuer, and expiration time.
 * Tokens generated by this service are used to authenticate subsequent requests from the client by validating
 * the token's integrity and claims.
 */
@Service
@RequiredArgsConstructor
public class JWTService {

    private final JwtEncoder jwtEncoder;

    /**
     * Generates a JWT token for an authenticated user.
     * <p>
     * Constructs a JWT token based on the authenticated user's details and authorities. The token includes
     * standard claims such as subject (the username), issuer, issued at, and expiration time. It also includes
     * a custom "scope" claim containing the concatenated authorities of the user, which can be used for
     * authorization purposes in the application.
     * <p>
     * The expiration time is set to 30 days from the token's issuance, but this can be adjusted based on
     * application security requirements.
     *
     * @param authentication the {@link Authentication} object containing the user's authentication information
     * @return a JWT token as a {@link String}
     */
    public String jwtToken(Authentication authentication) {
        val now = Instant.now();
        String scope = authentication
                .getAuthorities()
                .stream()
                .map(a -> a.getAuthority())
                .collect(Collectors.joining());
        val claims = JwtClaimsSet
                .builder()
                .subject(authentication.getName())
                .issuer("self")
                .issuedAt(now)
                .expiresAt(now.plus(30, ChronoUnit.DAYS))
                .claim("scope",scope)
                .build();

        return jwtEncoder.encode(JwtEncoderParameters.from(claims)).getTokenValue();
    }
}
